

-- ------------------------------------------------------------------------------------------------------------------------
--                                DATA ANALYSIS 
-- ------------------------------------------------------------------------------------------------------------------------

/* Task 1 : Top Selling Products
Query the Top 10 Products by Total sales value.
Challenge: Include Product name, total quantity sold, and total sales value
*/

use amazon;
SELECT 
oi.product_id,
p.product_name,
count(oi.quantity) as 'Total Quantity Sold',
cast(sum(oi.quantity*oi.price_per_unit) as decimal (10,2)) as'Total Sales Value'
FROM products p
INNER JOIN  order_items oi
on p.product_id=oi.product_id
GROUP BY oi.product_id,
p.product_name
order  by cast(sum(oi.quantity*oi.price_per_unit) as decimal (10,2))  desc
limit 10;


/*
Task 2 Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue
*/


use amazon;

-- ------------------- CONSULTA -----------------------------------------
SELECT 
c.category_id,
c.category_name,
sum(oi.quantity) as 'Total Quantity Sold',
cast(sum(oi.quantity*oi.price_per_unit) as decimal (10,2)) as Total_Sales,
cast(sum(oi.quantity*p.cogs) as decimal (10,2)) as Total_cost,
(cast(sum(oi.quantity*oi.price_per_unit) as decimal (10,2)) - cast(sum(oi.quantity*p.cogs) as decimal (10,2)))  as Revenue
-- ------------------- TABLAS  -----------------------------------------
FROM products p
INNER JOIN  order_items oi
on p.product_id=oi.product_id
INNER JOIN  category c
on c.category_id=p.category_id

-- ------------------- FILTROS  -----------------------------------------

GROUP BY category_id,category_name;

-- USANDO WITH
-- ------------------- CONSULTA -----------------------------------------
WITH sales_table as (
SELECT 
c.category_id,
c.category_name,
sum(oi.quantity) as 'Total Quantity Sold',
cast(sum(oi.quantity*oi.price_per_unit) as decimal (10,2)) as Total_Sales,
cast(sum(oi.quantity*p.cogs) as decimal (10,2)) as Total_cost
-- ------------------- TABLAS  -----------------------------------------
FROM products p
INNER JOIN  order_items oi
on p.product_id=oi.product_id
INNER JOIN  category c
on c.category_id=p.category_id

-- ------------------- FILTROS  -----------------------------------------

GROUP BY category_id,category_name)

Select 
s.category_id,
s.category_name,
(s.Total_Sales - s.Total_cost) as revenue
from sales_table s;


/* Task 3 : Average Order Value (AOV)
Compute the average Order value for each customer
Challenge: Include Only the Customers with more than 5 Orders
*/
use amazon;

SELECT 

-- CONSULTA
c.customer_id as customer_id,
CONCAT(c.first_name,' ',c.last_name) as Customer_Name,
COUNT(o.order_id) n_orders,
ROUND(sum(oi.quantity*oi.price_per_unit)/COUNT(o.order_id),2) avg_order_value

-- TABLA
FROM customers c
INNER JOIN orders o
ON c.customer_id=o.customer_id
INNER JOIN order_items oi
ON o.order_id=oi.order_id

-- FILTROS 
GROUP BY c.Customer_Id, 
	c.first_name, 
	c.last_name
HAVING COUNT(o.order_id) > 5;


/* Task 4 Monthly Sales Trend
Query Monthly Total Sales Over the Past year.
Challenge: Display the sales trend, grouping by month, return current_month_sales, Last 
Month Sales
*/

SELECT   
YEAR(o.order_date) AS 'Year',
MONTH(o.order_date) AS 'Month',
CAST(sum(sales) AS DECIMAL (10,2)) as 'Current Sales',
CAST(LAG(sum(sales)) OVER (ORDER BY YEAR(o.order_date), MONTH(o.order_date))AS DECIMAL  (10,2)) AS 'Last Month'
FROM order_items oi
inner join orders o
on o.order_id=oi.order_id

GROUP BY YEAR(o.order_date),MONTH(o.order_date)
ORDER BY YEAR(o.order_date) asc, MONTH(o.order_date) asc;


/*Task 5: Customers with No purchases
Find the Customer registered but never placed an order
Challenge: List customer details and the time since their registration.

Solution: To demonstrate my understanding of SQL queries and showcase multiple ways to solve the 
problem effectively, I have utilized three different approaches. Each approach achieves the
same goal but employs distinct techniques to illustrate versatility in SQL
*/
SELECT * 
FROM customers 
WHERE customer_id in( 
	SELECT  
	DISTINCT  c.customer_id
	FROM customers c
	left JOIN orders o
	ON c.customer_id=o.customer_id
	WHERE o.order_id is null
	group by c.customer_id
    );


/* Task 6 : Best Selling Category by State 
Identify the best-selling product for each state
Challenge: Include the Total Sales for that category within each State.

I have identified the Top 3 categories for each state to provide a focused analysis of the 
most significant contributors. Notably, the Electronics category accounts for approximately 
89% of total sales, which highlights its dominant impact. This analysis allows stakeholders
to make informed decisions based on the Top 3 categories, or expand the scope to the Top 5 
or Top 10 categories if needed, depending on their strategic preferences
*/
Select 
t.State,
t.Category,
cast(t.Total_Sales as decimal(10,2)) as 'Total Sales'
from (
		SELECT  
		c.state as State,
		ca.category_name as Category,
		sum(oi.Sales) as Total_Sales,
		rank() over (partition by c.state  order by sum(oi.sales) desc) as Ranking

		-- TABLA 
		FROM category ca
		inner join  products p
		on ca.category_id=p.category_id

		inner join order_items oi
		on p.product_id=oi.product_id

		inner join orders o
		on  oi.order_id=o.order_id

		inner join  customers c
		on c.customer_id=o.customer_id
		group by c.state,ca.category_name) as t
where t.Ranking <= 3;

/* Task 6 B : Least Selling Category by State 
Identify the least-selling product for each state
Challenge: Include the Total Sales for that category within each State.
*/
Select 
t.State,
t.Category,
cast(t.Total_Sales as decimal(10,2)) as 'Total Sales'
from (
		SELECT  
		c.state as State,
		ca.category_name as Category,
		sum(oi.Sales) as Total_Sales,
		rank() over (partition by c.state  order by sum(oi.sales) asc) as Ranking

		-- TABLA 
		FROM category ca
		inner join  products p
		on ca.category_id=p.category_id

		inner join order_items oi
		on p.product_id=oi.product_id

		inner join orders o
		on  oi.order_id=o.order_id

		inner join  customers c
		on c.customer_id=o.customer_id
		group by c.state,ca.category_name) as t
where t.Ranking = 1;


/* Task 7 Customer Lifetime Value
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their Customer Lifetime Sales
*/

		SELECT  
		cu.customer_id,
		CONCAT(cu.first_name,' ',cu.last_name) as Customer_Name,

        sum(oi.Sales) as Total_Sales,
    DENSE_RANK() OVER (ORDER BY SUM(oi.Sales) DESC) AS Ranking
		-- TABLA 
		FROM customers cu
        inner join  orders o
		on cu.customer_id=o.customer_id

		inner join order_items oi
		on  oi.order_id=o.order_id
		group by 1,2;
        
/*
Task 8 Inventory Stock Alerts
Query Products with stock levels below a certain threshold(e., less than 10 units)
Challenge: Include last restock date and warehouse information
*/
SELECT 
p.product_name,
i.stock,
i.warehouse_id,
i.last_stock_date
FROM INVENTORY i
inner join products p
on p.product_id=i.product_id
where i.stock<10;

/* Task 9 Shipping Delays
Identify orders where the shipping date is later than 4 days after the order date.
Challenge: Include customer, Order details, and delivery provider.
*/
SELECT
o.*,
s.shipping_date,
CONCAT(c.first_name,' ',c.last_name) as Customer_Name,
DATEDIFF(s.shipping_date, o.order_date) as  delay 
FROM orders o
INNER JOIN SHIPPING s
ON o.order_id = s.order_id
inner join  customers c
on c.customer_id=o.customer_id
WHERE DATEDIFF( s.shipping_date,o.order_date) > 4;

/* Task 10 Payment Success Rate
Calculate the Percentage of successful payments, access all orders.
Challenge: Include breakdown by Payment status (eg., Failed,pending)
*/
-- PRIMER NIVEL DE GRANULARIDAD - Top 5  Sales by Seller

SELECT 
    s.seller_id AS 'Seller_id',
    s.seller_name AS 'Seller_name',
    CAST(SUM(oi.Sales) AS DECIMAL(10,2)) AS 'Total_Sales'
FROM sellers s
LEFT JOIN orders o ON o.seller_id = s.seller_id
LEFT JOIN order_items oi ON oi.order_id = o.order_id
GROUP BY s.seller_id, s.seller_name
ORDER BY Total_Sales DESC
LIMIT 5;

-- Con el porcentaje

WITH Top_Sellers 

-- TOP SELLERS CALCULADOS PREVIAMENTE 
AS
(
	SELECT 
		s.seller_id, 
		s.seller_name, 
		ROUND(SUM(oi.Sales),2) Total_Sales
	FROM Orders o
	JOIN Order_items oi
		ON oi.order_id = o.order_id
	JOIN Sellers s
		ON s.seller_id = o.seller_id
	GROUP BY 
			s.seller_id,
			s.seller_name
	ORDER BY 
		Total_Sales DESC
limit 5
), 
--  Ordenes por estado / cantidad por seller

Seller_Orders_Statuses
as
(
SELECT 
	seller_id, 
	order_status, 
	CAST(COUNT(*) as float) Nr_Orders_By_Seller 
FROM Orders 
GROUP BY seller_id, order_status
),

-- TOTAL DE ORDENES POR  SELLER

Total_Orders
AS
(SELECT Seller_id, COUNT(order_status) Total_Orders_by_Each_Seller 
FROM Orders
GROUP BY Seller_id
)

-- COMBINACION DE LO ANTERIOR
SELECT 
	ts.seller_id,
	ts.seller_name,
	ts.Total_Sales,
	sos.order_status,
	Nr_Orders_By_Seller,
--	Total_Orders_by_Each_Seller,
ROUND((Nr_Orders_By_Seller/Total_Orders_by_Each_Seller) * 100,2) Percent_of_Orders
FROM Top_Sellers ts
LEFT JOIN Seller_Orders_Statuses sos
	ON sos.seller_id = ts.seller_id
LEFT JOIN Total_Orders ot
ON ot.seller_id = ts.seller_id
ORDER BY 
		ts.Total_Sales DESC;




/*
Task 12 Product Profit Margin
Calculate the profit margin for much product (difference between price and cost of goods sold)
Challenge: Rank products by their profit margin, showing highest to lowest
*/
WITH Profit_sales AS
(
SELECT 
p.product_id, 
p.product_name, 
ROUND(SUM(oi.sales),2) as Sales,
ROUND(SUM(oi.Sales - (p.cogs * oi.quantity)),2) as Profit
FROM products p

INNER JOIN order_items oi
ON  oi.product_id=p.product_id
INNER JOIN Orders o
ON  oi.Order_id=o.Order_id

GROUP BY 1,2
) 
SELECT 
ps.product_id, 
ps.product_name, 
ps.Sales,
ps.Profit,
cast((ps.Profit/ps.Sales)*100 as decimal(10,2)) as Margin,
DENSE_RANK() OVER(ORDER BY ps.Profit DESC) Rank_by_Margin
from Profit_sales ps;

/*  Task 13 Most Returned Products
Query the top 10 products by the number of return.
Challenge: Display the return rate as a percentage of total unitssold for each product
*/
with returns_table as(
	select 
	p.product_id,
	p.product_name,
	count(*) as Total_order,
	sum(case when  o.order_status='Returned' then 1 else 0 end) as Total_Cancel
	from products p

	INNER JOIN order_items oi
	ON  oi.product_id=p.product_id
	INNER JOIN Orders o
	ON  oi.Order_id=o.Order_id
	INNER JOIN shipping s
	on s.Order_id=o.Order_id
	group by p.product_id,p.product_name
	order by Total_cancel desc)

SELECT
t.product_id 'ID', 
t.product_name 'Product Name',
t.Total_Cancel,
t.total_order,
round((t.Total_Cancel/t.Total_order*100),2) as 'Return Ratio'
FROM returns_table as t;

/*
This query provides key insights into product sales and order status:

Order Distribution: Track product performance across different order statuses 
(Completed, In Progress, Returned).
Product Performance: Identify top-selling and underperforming products by comparing units sold to 
total units.
Percentage Breakdown: View the percentage of units sold in each status to spot trends 
(e.g., returns or unfulfilled orders).

Filters You Can Apply:
Product Category: p.category_id = 1 to analyze specific product categories.
Year: YEAR(order_date) = 2024 to focus on a particular year's data.
Order Status: order_status = 'Completed' (or other statuses) to focus on specific order types.
Units Sold: Nr_of_Units > 100 to filter products with significant sales.
These filters will help you get focused insights on sales, product performance, and order trends.
*/


/*
Task 14  Inactive Sellers
Identify Seller who haven't made any sales in the Last 6 months
Challenge : Show the last sale date and total sales from those sellers
*/

set @fecha_actual=  DATE_SUB((select MAX(o.order_date) as last_date from orders o), INTERVAL 6 MONTH);

WITH sales_total AS (
    SELECT 
        s.seller_id,
        s.selloriginer_name,
        MAX(o.order_date) AS last_sale_date,
        COALESCE(SUM(oi.sales), 0) AS total_sales  -- Si no hay ventas, devuelve 0
    FROM sellers s
    LEFT JOIN orders o ON s.seller_id = o.seller_id
    LEFT JOIN order_items oi ON oi.order_id = o.order_id
    GROUP BY s.seller_id, s.seller_name
)
SELECT 
    st.seller_id,
    st.seller_name,
    st.last_sale_date,
    st.total_sales
FROM sales_total st
WHERE st.last_sale_date IS NULL  -- Nunca ha vendido
   and st.last_sale_date < DATEADD(MONTH, -6, @fecha_actual)  -- Última venta hace más de 6 meses
ORDER BY st.last_sale_date ASC;  -- Ordena por el más inactivo


/* Task 15 Identify customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new 
challenge: List customers id, name, total orders, total returns
*/


/*
Task 16: Top 5 Customers by Orders in Each State
Identify the Top 5 Customers with the Highest number of Orders for Each State.
Challenge: Include the Number of Orders and total Sales for each Customer.
*/

/* Task 17: Revenue by Shipping Provider
Calculate the Total Revenue handled by each shipping provider.
Challenge: Include the Total Number of Orders handled and the Average delivery time for each provider
*/


/* Task 18 Top 10 Product with Highest decreasing revenue ratio compare to last year(2022) and current 
year(2023)
Challenge: Return product_id, Product_name, category_name,2022 revenue and 2023 Revenue decrease ratio
at end Round the result 
*/

/*
Task 19: Store Procedure
Create a function as soon as the product is sold the same quantity should reduced from
Inventory table
*/

-- Apple Air pode 3rd gen Product_id 1--> Stock -->45
-- Apple Airpods Max Product_id 2---> Stock---> 39


